name: Build Website

on: [push, workflow_dispatch]

permissions:
    contents: read
    pages: write
    id-token: write

jobs:
    build-site:
        name: Build Jekyll Website
        runs-on: ubuntu-latest
        steps:
          - name: Checkout
            uses: actions/checkout@v4
          - name: Get Project Metadata (repoData.json)
            run: |
                mkdir -p _data
                gh repo list -L 200 --json \
                name,description,createdAt,updatedAt,\
                forkCount,stargazerCount,watchers,languages,\
                primaryLanguage,repositoryTopics,isArchived,\
                isFork,isPrivate,isTemplate \
                $OWNER > _data/repoData.json
            env:
                GH_TOKEN: ${{ secrets.WEBSITEPAT }} # Limited PAT
                OWNER: ${{ github.repository_owner }}
          - name: Extract Project Names (repoList)
            uses: mikefarah/yq@v4.44.3
            with:
                cmd: yq e -r '.[].name' _data/repoData.json > _data/repoList
          - name: Get Project Documents Folder
            run: |
                shopt -s extglob
                mkdir -p assets/projects
                cd assets/projects
                cat ../../_data/repoList | while read line; do
                    git clone --depth 1 https://$GH_TOKEN@github.com/$OWNER/$line.git
                    cd $line
                    git sparse-checkout init --cone
                    git sparse-checkout set documents
                    rm -rd $(ls | grep -v documents) .git*
                    mkdir -p ../../../_includes/$line
                    if [ -f documents/README.md ]; then
                        mv documents/README.md ../../../_includes/$line/
                    else
                        echo "Description not available" > ../../../_includes/$line/README.md
                    fi
                    cd ..
                done
            env:
                GH_TOKEN: ${{ secrets.WEBSITEPAT }}
                OWNER: ${{ github.repository_owner }}
          - name: Get Project File List (repoFiles.json) # Public Repos Only
            run: |
                set +e
                echo "[" > _data/repoFiles.json
                cat _data/repoList | while read line; do
                    echo "{\"name\": \"$line\"," >> _data/repoFiles.json
                    echo "\"files\": " >> _data/repoFiles.json
                    gh api --jq '[.tree[] | {path: .path}]' repos/Matt-Santos/$line/git/trees/main?recursive=true >> _data/repoFiles.json
                    RELEASE_CHECK=$(gh release view --repo Matt-Santos/$line)
                    if [ -n "$RELEASE_CHECK" ]; then
                        echo ",\"releases\": " >> _data/repoFiles.json
                        gh release view --repo Matt-Santos/$line --json assets -q '[.assets[].name]' >> _data/repoFiles.json
                    fi
                    echo "}," >> _data/repoFiles.json
                done
                sed -i '$s/.$/]/' _data/repoFiles.json
            env:
                GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                OWNER: ${{ github.repository_owner }}
          - name: Create Individual Project Pages
            run: |
                mkdir -p projects
                cat _data/repoList | while read line; do
                    echo "---" > projects/${line}.html
                    echo "layout: project" >> projects/${line}.html
                    echo "title: ${line}" >> projects/${line}.html
                    echo "bg_label: ${line}" >> projects/${line}.html
                    echo "bg: /assets/projects/${line}/documents/images/banner.jpg" >> projects/${line}.html
                    echo "---" >> projects/${line}.html
                done
                ls projects
          - name: Setup Ruby
            uses: ruby/setup-ruby@v1
            with:
              ruby-version: '3.3'
              bundler-cache: true
              cache-version: 0
          - name: Setup Pages
            id: pages
            uses: actions/configure-pages@v5
          - name: Build with Jekyll
            run: bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
            env:
              JEKYLL_ENV: production
          - name: Upload artifact
            uses: actions/upload-pages-artifact@v3
    deploy:
        name: Deploy Site
        needs: build-site
        environment:
          name: github-pages
          url: ${{ steps.deployment.outputs.page_url }}
        runs-on: ubuntu-latest
        steps:
          - name: Deploy to GitHub Pages
            id: deployment
            uses: actions/deploy-pages@v4